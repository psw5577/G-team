import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class comal {

    static Point p[];

    static class Point {
        int x;
        int y;
        Point( int x, int y ) {
            this.x = x;
            this.y = y;
        }
    }
---------------------------------------------------------------------------------------------------수정
    static class dP{
        Point a;
        Point b;
        int dis;
        dP( Point a, Point b, int dis) {
            this.a = a;
            this.b = b;
            this.dis = dis;
        }
    }


    static int getDistance( Point p1, Point p2 ) {
            return (p1.x-p2.x)*(p1.x-p2.x) + (p1.y-p2.y)*(p1.y-p2.y);
    }

    // (4)
    static dP getmin(int left, int right ) {
        int d_min = 100000;
        int i, j;
        dP[] dp = new dP[1];
        for( i = left; i < right; i++ ) {
            for( j = i+1; j <= right; j++ ) {
                int d = getDistance( p[i], p[j] );
                if( d_min > d )  {
                    d_min = d;
                    dp[1].a = p[i];
                    dp[1].b = p[j];
                    dp[1].dis = d_min;
                }
            }
        }
        return dp[1];
    }
----------------------------------------------------------------------------------------------------------
    // (3)
    static int divCon( int left, int right ) {

        // 4
        int size = right - left + 1;	 // section size
        if( size <= 3 )
            return getmin( left, right ); ----------------------------------> 오류

        // 5
        int mid = ( left + right ) / 2;
        int d_left = divCon( left, mid );		// left section distance
        int d_right = divCon( mid+1, right );	// right section distance

        int d_min = Math.min( d_left, d_right );

        // 6
        List<Point> s_mid = new ArrayList<>();	// middle section
        for( int i = left; i <= right; i++ ) {
            int d_x = p[i].x - p[mid].x;
            if( d_x * d_x < d_min )
                s_mid.add( p[i] );
        }

        // 7
        Collections.sort( s_mid, ( p1,p2 ) -> p1.y - p2.y );
        int size2 = s_mid.size();   // candidate size
        for( int i = 0; i < size2-1; i++ ) {
            for( int j = i+1; j < size2; j++ ) {
                int d_y = s_mid.get(j).y - s_mid.get(i).y;
                if( d_y * d_y < d_min ) {
                    int d = getDistance( s_mid.get(i), s_mid.get(j) );
                    if( d_min > d ) d_min = d;
                }
                else break;
            }
        }
        return d_min;
    }

    public static void main(String[] args) {

        // 1
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        p = new Point[n];
        for( int i = 0; i < n; i++ )
            p[i] = new Point( sc.nextInt(), sc.nextInt() );
        sc.close();

        // 2 x오름차순 정렬
        Arrays.sort( p, ( p1,p2 ) -> p1.x - p2.x );

        // 3
        System.out.println( divCon( 0, n-1 ) );
    }
}